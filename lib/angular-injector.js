// Generated by CoffeeScript 1.7.1
module.exports = {
  annotate: function(src, opts) {
    var css, falafel, isFunctionCall, isInjector, nodeId, output, parents, wrap;
    if (opts == null) {
      opts = {};
    }
    falafel = require('falafel');
    css = require('cssauron-falafel');
    if (opts.token == null) {
      opts.token = 'ng';
    }
    isFunctionCall = css('call > id');
    parents = {};
    isInjector = function(node) {
      return node.name === opts.token && isFunctionCall(node);
    };
    wrap = function(node) {
      var param, params, _ref;
      if (!((_ref = node.params) != null ? _ref.length : void 0)) {
        return node.source();
      }
      params = ((function() {
        var _i, _len, _ref1, _results;
        _ref1 = node.params;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          param = _ref1[_i];
          _results.push(param);
        }
        return _results;
      })()).map(function(_arg) {
        var name;
        name = _arg.name;
        return "'" + name + "'";
      });
      return "[" + (params.join(', ')) + ", " + (node.source()) + "]";
    };
    nodeId = function(node) {
      return node.range.join('-');
    };
    output = falafel(src, function(node) {
      var angularFn, id, parent;
      id = nodeId(node);
      if (parents[id] != null) {
        angularFn = parents[id]["arguments"][0];
        node.update(wrap(angularFn));
        return delete parents[id];
      } else if (isInjector(node)) {
        parent = node.parent;
        return parents[nodeId(parent)] = parent;
      }
    });
    return output.toString();
  }
};
